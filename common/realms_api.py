# realms api classes generated by https://app.quicktype.io/
import typing
from dataclasses import dataclass
from enum import Enum
from types import NoneType

import apischema
import attrs

import common.utils as utils
from common.microsoft_core import BaseMicrosoftAPI


class Permission(Enum):
    VISITOR = "VISITOR"
    MEMBER = "MEMBER"
    OPERATOR = "OPERATOR"


class State(Enum):
    CLOSED = "CLOSED"
    OPEN = "OPEN"


class WorldType(Enum):
    NORMAL = "NORMAL"


@dataclass
class FullRealm:
    id: int
    remote_subscription_id: str
    owner: typing.Optional[str]
    name: str
    default_permission: Permission
    state: State
    days_left: int
    expired: bool
    expired_trial: bool
    grace_period: bool
    world_type: WorldType
    players: NoneType
    max_players: int
    minigame_name: NoneType
    minigame_id: NoneType
    minigame_image: NoneType
    active_slot: int
    slots: NoneType
    member: bool
    subscription_refresh_status: NoneType
    club_id: typing.Optional[int] = None
    owner_uuid: typing.Optional[str] = None
    motd: typing.Optional[str] = None


@dataclass
class FullWorlds:
    servers: list[FullRealm]


@dataclass
class Player:
    uuid: str
    name: NoneType
    operator: bool
    accepted: bool
    online: bool
    permission: Permission


@dataclass
class PartialRealm:
    id: int
    players: list[Player]
    full: bool


@dataclass
class ActivityList:
    servers: list[PartialRealm]


@attrs.define()
class RealmsAPI(BaseMicrosoftAPI):
    relying_party: str = attrs.field(default=utils.REALMS_API_URL)
    base_url: str = attrs.field(default=utils.REALMS_API_URL)

    async def request(self, *args, **kwargs):
        HEADERS = {
            "Client-Version": utils.MC_VERSION,
            "User-Agent": "MCPE/UWP",
        }
        ignore_this = kwargs.pop("headers", None)
        return await super().request(*args, **kwargs, headers=HEADERS)

    async def join_realm_from_code(self, code: str):
        return apischema.deserialize(
            FullRealm, await self.post(f"invites/v1/link/accept/{code}")
        )

    async def fetch_realms(self):
        return apischema.deserialize(FullWorlds, await self.get("worlds"))

    async def fetch_activities(self):
        return apischema.deserialize(
            ActivityList, await self.get("activities/live/players")
        )

    async def leave_realm(self, realm_id: int | str):
        await self.delete(f"invites/{realm_id}")
        return None
